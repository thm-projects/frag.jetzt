@use "sass:math";

$innerWidth: 375px;
$innerHeight: 851px;
$own-margin: 20px;
$customScaleFactor: 0.8;

$mockWidth: 557px;
$mockHeight: 1175px;
$mockPadLeft: 40px;
$mockPadTop: 155px;
$mockPadRight: 33px;
$mockPadBottom: 168px;

$scale-factor: math.div($innerWidth, $mockWidth - $mockPadRight - $mockPadLeft);
$width: math.round($mockWidth * $scale-factor);
$height: math.round($mockHeight * $scale-factor);
$padding: math.round($mockPadTop * $scale-factor) math.round($mockPadRight * $scale-factor) math.round($mockPadBottom * $scale-factor) math.round($mockPadLeft * $scale-factor);

$parentWidth: 900px;
$dialog-margin: 125px;
$parentWidthHalf: math.div($parentWidth, 2);

$scaledWidth: math.div($width * (1 - $customScaleFactor), 2);

.mobile-mock-wrapper {
  background: url("/assets/images/phone_empty.png") no-repeat;
  background-size: $width $height;
  --end-position: #{$parentWidthHalf - $dialog-margin + $own-margin - $scaledWidth};
  --start-position: #{$parentWidthHalf - $dialog-margin - $width + $scaledWidth};
  --current-position: var(--start-position);
  position: absolute;
  padding: $padding;
  left: calc(50% + var(--current-position));
  opacity: 0;
  width: $width;
  height: $height;
  top: calc(50% - #{math.div($height, 2)});
  transition: left 0.5s ease, opacity 0.5s ease;
  z-index: -1;
  overflow: hidden;
  transform: scale($customScaleFactor);

  > div {
    display: flex;
    background-color: var(--background);
    width: 100%;
    height: 100%;

    > div {
      display: inline-block;
      width: 100%;
      overflow-y: auto;
      overflow-x: hidden;
      padding: 0 5% 45px;
    }
  }
}

.preview-btn {
  margin-top: 1rem;
  background-color: var(--secondary);
  color: var(--on-secondary);
}
