@use "sass:map";
@use "sass:meta";
@use "../../../../node_modules/@angular/material/index" as mat;

/// Defines Light and Dark Material Theme based on a reference $config
/// @param {Map} $config The theme configuration; based on matx.define-theme($config)
/// @return {Map} Light and Dark Theme Object
/// @TODO adjust reference on material-experimental integration
/// @see @angular/material-experimental
@function define-theme($config) {
  @return (
    light:
      mat.define-theme(
        map.deep-merge(
          $config,
          (
            color: (
              theme-type: light,
            ),
          )
        )
      ),
    dark:
      mat.define-theme(
        map.deep-merge(
          $config,
          (
            color: (
              theme-type: dark,
            ),
          )
        )
      )
  );
}

/// Generates color-variant classes for components
/// @param {Map} $theme A theme object based on matx.define-theme($config)
/// @param {String} $name The class suffix for the color variant class (.#{$color-variant}-#{name})
/// @param {String} $mat-name The mixin name from the Material Component for coloring the component
/// @param {ArgList} $colors A list of identifiers/strings for the prefix of the created classes (.#{$color-variant}-#{name})
@mixin -generate-classes($theme, $name, $mat-name, $colors...) {
  @each $color in $colors {
    .#{$color}-#{$name} {
      @include meta.apply(
        meta.get-mixin($mat-name, mat),
        $theme,
        $color-variant: $color
      );
    }
  }
}

/// Generate color-variant classes for all used components inside this app
/// @param {Map} $theme A theme object based on matx.define-theme($config)
@mixin generate-color-classes($theme) {
  // Not supported: Container
  .primary-container {
    background-color: #{mat.get-theme-color($theme, primary-container)};
    color: #{mat.get-theme-color($theme, on-primary-container)};
  }

  .error-container {
    background-color: #{mat.get-theme-color($theme, error-container)};
    color: #{mat.get-theme-color($theme, on-error-container)};
  }

  // Badge
  // Default: error
  // All classes: primary, secondary, tertiary, error
  //  - Currently no Class allowed!
  // @include -generate-classes($theme, 'badge', 'badge-color', primary, secondary, tertiary, error);
  // Fix:
  .primary-badge {
    --mat-badge-background-color: #{mat.get-theme-color($theme, primary)};
    --mat-badge-text-color: #{mat.get-theme-color($theme, on-primary)};
  }

  // Button
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  @include -generate-classes(
    $theme,
    "button",
    "button-color",
    secondary,
    error
  );

  // Button Toggle
  // Default: secondary
  // All classes: primary, secondary, tertiary, error
  //  - Currently no Class allowed!
  // @include -generate-classes($theme, 'button-toggle', 'button-toggle-color', primary, secondary, tertiary, error);

  // Checkbox
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'checkbox', 'checkbox-color', primary, secondary, tertiary, error);

  // Chips
  // Default: secondary
  // All classes: primary, secondary, tertiary, error
  @include -generate-classes($theme, "chips", "chips-color", primary);

  // Datepicker
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'datepicker', 'datepicker-color', primary, secondary, tertiary, error);

  // Fab
  // Default: primary
  // All classes: primary, secondary, tertiary
  // @include -generate-classes($theme, 'fab', 'fab-color', primary, secondary, tertiary);

  // Form field
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'form-field', 'form-field-color', primary, secondary, tertiary, error);

  // Icon
  // Default: surface
  // All classes: surface, primary, secondary, tertiary, error
  @include -generate-classes($theme, "icon", "icon-color", error);

  // Option
  // Default: secondary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'option', 'option-color', primary, secondary, tertiary, error);

  // Progress-bar
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'progress-bar', 'progress-bar-color', primary, secondary, tertiary, error);

  // Progress-spinner
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'progress-spinner', 'progress-spinner-color', primary, secondary, tertiary, error);

  // Pseudo-checkbox
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'pseudo-checkbox', 'pseudo-checkbox-color', primary, secondary, tertiary, error);

  // Radio
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'radio', 'radio-color', primary, secondary, tertiary, error);

  // Select
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'select', 'select-color', primary, secondary, tertiary, error);

  // Slide-toggle
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'slide-toggle', 'slide-toggle-color', primary, secondary, tertiary, error);

  // Slider
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'slider', 'slider-color', primary, secondary, tertiary, error);

  // Stepper
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'stepper', 'stepper-color', primary, secondary, tertiary, error);

  // Tabs
  // Default: primary
  // All classes: primary, secondary, tertiary, error
  // @include -generate-classes($theme, 'tabs', 'tabs-color', primary, secondary, tertiary, error);
}
