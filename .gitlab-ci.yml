variables:
  BUILD_DIR: dist

stages:
  - install
  - test
  - codequality
  - build
  - deploy
  - push_manifest
  - deploy_servers

install:
  stage: install
  tags:
    - angular
  image: angular:19
  allow_failure: false
  script:
    - npm ci --legacy-peer-deps
  artifacts:
    paths:
      - node_modules/
      - /root/.cache/Cypress/
    expire_in: 30 minutes

eslint:
  stage: codequality
  tags:
    - angular
  image: angular:19
  allow_failure: false
  dependencies:
    - install
  needs:
    - install
  script:
    - npx eslint src

unit_tests:
  stage: test
  tags:
    - angular
  image: angular:19
  allow_failure: true
  dependencies:
    - install
  needs:
    - install
  artifacts:
    paths:
      - coverage
  script:
    - npm test

.e2e_cypress:
  stage: test
  tags:
    - angular
  image: angular:19
  allow_failure: true
  variables:
    TEST_USER_MAIL: $E2E_TEST_USER_MAIL
    TEST_USER_PASSWORD: $E2E_TEST_USER_PASSWORD
    TEST_ROOM_SHORTID: $E2E_TEST_ROOM_SHORTID
  dependencies:
    - install
  needs:
    - install
  before_script:
    - apt-get update && apt-get -y install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
    - ./node_modules/.bin/cypress install
  script:
    - source ci_staging_backend.export
    - npx cypress verify
    - ng e2e arsnova-angular-frontend --watch=false
  artifacts:
    paths:
      - cypress/videos
    expire_in: 15 mins

sonar:
  stage: codequality
  only:
    - staging
  tags:
    - sonar-cli
  allow_failure: true
  dependencies:
    - unit_tests
    - install
  needs:
    - unit_tests
    - install
  script:
    - sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=https://scm.thm.de/sonar/ -Dsonar.qualitygate.wait=true

ngbuild:
  stage: build
  tags:
    - angular
  image: angular:19
  allow_failure: false
  dependencies:
    - install
  needs:
    - install
  script:
    - ng build --configuration production --aot
    - mv dist dist2
    - mv dist2/fragjetzt/browser/ dist/
    - mv dist2/fragjetzt/3rdpartylicenses.txt dist/
    - rm -rf dist2/
    - |
      echo "Package: @shopware-ag/meteor-icon-kit" >> dist/3rdpartylicenses.txt
    - |
      echo "LICENSE: \"$(jq .license node_modules/@shopware-ag/meteor-icon-kit/package.json)\"" >> dist/3rdpartylicenses.txt
    - cat node_modules/@shopware-ag/meteor-icon-kit/LICENSE.md >> dist/3rdpartylicenses.txt
    - echo "" >> dist/3rdpartylicenses.txt
    - echo "--------------------------------------------------------------------------------" >> dist/3rdpartylicenses.txt
  artifacts:
    paths:
      - "$BUILD_DIR"

deploy_staging:
  stage: deploy_servers
  only:
    - staging
  tags:
    - common
  script:
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - ssh-keyscan "$STAGING_SERVER_URL" >> ~/.ssh/known_hosts
    - ssh-add <(echo "$STAGING_KEY")
    - ssh "$STAGING_SSH_URL"

deploy_production:
  stage: deploy_servers
  only:
    - master
  tags:
    - common
  dependencies:
    - ngbuild
  script:
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - ssh-keyscan "$PROD_SERVER_URL" >> ~/.ssh/known_hosts
    - ssh-add <(echo "$PROD_KEY")
    - ssh "$PROD_SSH_URL"

deploy_frag_thm:
  stage: deploy_servers
  only:
    - master
  tags:
    - common
  script:
    - eval $(ssh-agent -s)
    - mkdir ~/.ssh
    - ssh-keyscan "$SSH_FRAG_THM_SERVER_URL" >> ~/.ssh/known_hosts
    - ssh-add <(echo "$SSH_FRAG_THM_PRIVATE_KEY")
    - ssh "$SSH_FRAG_THM_USER"

.build_image_template:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags:
    - kaniko
  script:
    - sed -i '/^dist$/d' .dockerignore
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo "$CI_REGISTRY" "$IMAGE"
    - /kaniko/executor
      --custom-platform "$PLATFORM"
      --context         "$CI_PROJECT_DIR"
      --dockerfile      "$CI_PROJECT_DIR/.docker/Dockerfile.kaniko"
      --build-arg       "BUILD_DIR=$BUILD_DIR"
      --build-arg       "TARGETPLATFORM=$PLATFORM"
      --destination     "$IMAGE"

.manifest:
  stage: push_manifest
  only:
    - staging
    - master
  tags:
    - common
  before_script:
    - PROJECT_URL="https://github.com/estesp/manifest-tool"
    - VERSION="v2.1.9"
    - ARTIFACT="binaries-manifest-tool-2.1.9.tar.gz"
    - URL="$PROJECT_URL/releases/download/$VERSION/$ARTIFACT"
    - curl -L -o manifest-tool.tar.gz $URL
    - tar -zxvf manifest-tool.tar.gz manifest-tool-linux-$(dpkg --print-architecture)
    - rm manifest-tool.tar.gz
    - mv manifest-tool-linux-$(dpkg --print-architecture) manifest-tool
    - chmod +x manifest-tool

build_image_amd64:
  extends: .build_image_template
  only:
    - staging
    - master
  variables:
    PLATFORM: linux/amd64
    IMAGE: "$CI_REGISTRY_IMAGE:amd64-$CI_COMMIT_REF_SLUG"

build_image_arm64:
  extends: .build_image_template
  only:
    - staging
    - master
  variables:
    PLATFORM: linux/arm64
    IMAGE: "$CI_REGISTRY_IMAGE:arm64-$CI_COMMIT_REF_SLUG"

gitlab_registry_manifest:
  extends: .manifest
  script:
    - ./manifest-tool --username "$CI_REGISTRY_USER" --password "$CI_REGISTRY_PASSWORD" push from-args
      --platforms linux/arm64,linux/amd64
      --template "${CI_REGISTRY_IMAGE}:ARCH-${CI_COMMIT_REF_SLUG}"
      --target "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"

build_image_manual:
  extends: .build_image_template
  when: manual
  except:
    - staging
    - master
